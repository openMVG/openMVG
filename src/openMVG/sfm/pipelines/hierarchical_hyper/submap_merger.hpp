// This file is part of OpenMVG, an Open Multiple View Geometry C++ library.

// Copyright (c) 2017 nomoko AG, Sebastien Chappuis<sebastien@nomoko.camera>, Pierre MOULON.

// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

#pragma once

#include "openMVG/sfm/pipelines/hierarchical_hyper/submap.hpp"
#include "openMVG/sfm/pipelines/hierarchical_hyper/scene_aligner.hpp"

namespace openMVG{
namespace sfm{

class SceneAligner;

/**
 * @brief This class is used to merge a set of hypersfm submaps back together
 *
 * # Required before merging :
 * - A hierarchical binary tree of submaps, where only the leaf submaps are reconstructed.
 *   The tree is typically generated by using the HyperCluster class on an unreconstructed
 *   SfMData object, and the leaf submaps are reconstructed using the
 *   SubmapSfMReconstrutionEngine which is a slight adaptation of the sequential sfm engine.
 *
 * # Guaranteed after merging :
 * - each submap in the tree contains 3d structure and poses corresponding to the merging of
 *   its two children submaps.
 * - Merging does not create any additional 3d points or camera poses, although it can filter out
 *   bad poses and bad landmarks.
 * - The leaf submaps remain untouched during the whole merging.
 *
 * # The merging process :
 * Reconstructed submaps are merged with their sister submaps
 * into their parent submap recursively (by calling MergeSubmapPair).
 * At the end of the process, each submap in the tree contains 3D structure
 * and poses and the top parent submap contained in submaps[0]
 * contains the full scene.
 *
 * # Merging a pair of submaps :
 * Needed for two submaps to be mergeable :
 * - The two submaps have to be "sisters", i.e. they should have the same parent submap.
 * - The two submaps should have common tracks amongst themselves (separators) :
 *   - The list of these tracks is contained in the parent submap in the "separators" field.
 *   - This requirement is guaranteed by using HyperCluster when clustering a scene into submaps.
 * - Some of the common separator tracks should correspond to landmarks in both submaps. This means that
 *   sibling submaps share common 3d points which are used for resectioning the two scenes.
 *   NOTE THAT THIS IS NOT GUARANTEED BY THE CLUSTERING since when we cluster the data
 *   we do not know anything about the 3d structure of the scene yet !
 *   It is therefore possible that there are no common points between two submaps after reconstruction. TODO : what happens in this case is not well defined
 *
 * Note that when merging two submaps, the two submaps are kept unchanged, only their parent submap is modified in the process.
 */
class SubmapMerger
{
public:
  explicit SubmapMerger(
      const HsfmSubmaps &submaps,
      const cameras::Intrinsic_Parameter_Type & intrinsic_refinement_options);

  /**
   * @brief The main processing function of this class.
   * Recursively merges the whole submaps tree.
   */
  bool Merge(const std::string &debug_out_dir = "");

  HsfmSubmaps getSubmaps() const {return submaps_;}

protected:
  bool MergeSubmapPair(const IndexT parent_id, const std::string &debug_out_dir);
  virtual bool BundleAdjustment_FixedSeparators(const IndexT parent_id);
  void updateIntrinsics(HsfmSubmap& smapA, HsfmSubmap& smapB);

  std::unique_ptr<SceneAligner> scene_aligner_;
  HsfmSubmaps submaps_;
  cameras::Intrinsic_Parameter_Type intrinsic_refinement_options_;

  /// Discard track with too large residual error
  /// (copied from sequential sfm code)
  bool badTrackRejector(double dPrecision, size_t count, SfM_Data& scene);
};

}
}
