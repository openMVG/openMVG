#---------------------
#Third party libraries
#---------------------

# libs should be static
SET(BUILD_SHARED_LIBS OFF)

# use PIC code for link into shared lib
IF(UNIX)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
ENDIF(UNIX)

# Unit test library
IF (OpenMVG_BUILD_TESTS)
  ADD_SUBDIRECTORY(CppUnitLite)
ENDIF()

# Basic filesystem utils
SET(STLPLUS_INCLUDE_INSTALL_DIR ${CMAKE_INSTALL_PREFIX}/include/openMVG/third_party/stlplus3)
ADD_SUBDIRECTORY(stlplus3)

# Add graph library
IF(DEFINED OpenMVG_USE_INTERNAL_LEMON)
  ADD_SUBDIRECTORY(lemon)
  SET_PROPERTY(TARGET lemon PROPERTY FOLDER OpenMVG/3rdParty/lemon)
  SET_PROPERTY(TARGET check PROPERTY FOLDER OpenMVG/3rdParty/lemon)
ENDIF()

##
# Image I/O
##
IF(NOT JPEG_FOUND)
  SET(OpenMVG_USE_INTERNAL_JPEG ON PARENT_SCOPE)
  SET(JPEG_INCLUDE_INSTALL_DIR ${CMAKE_INSTALL_PREFIX}/include/openMVG/third_party/jpeg)
  ADD_SUBDIRECTORY(jpeg)
  LIST(APPEND JPEG_INCLUDE_DIRECTORIES ${CMAKE_CURRENT_SOURCE_DIR}/jpeg ${CMAKE_CURRENT_BINARY_DIR}/jpeg/config)
  SET(JPEG_INCLUDE_DIR ${JPEG_INCLUDE_DIRECTORIES})
  SET(JPEG_LIBRARIES jpeg PARENT_SCOPE)
  SET(JPEG_INCLUDE_DIR ${JPEG_INCLUDE_DIR} PARENT_SCOPE)
ENDIF(NOT JPEG_FOUND)

# TIFF and PNG depend on zlib, if one of them is not found add the internal zlib
IF(NOT PNG_FOUND OR NOT TIFF_FOUND)
  ADD_SUBDIRECTORY(zlib)
ENDIF(NOT PNG_FOUND OR NOT TIFF_FOUND)

IF (NOT PNG_FOUND)
  SET(OpenMVG_USE_INTERNAL_PNG ON PARENT_SCOPE)
  SET(ZLIB_INCLUDE_INSTALL_DIR ${CMAKE_INSTALL_PREFIX}/include/openMVG/third_party/zlib)
  SET(PNG_INCLUDE_INSTALL_DIR ${CMAKE_INSTALL_PREFIX}/include/openMVG/third_party/png)
  ADD_SUBDIRECTORY(png)
  SET(PNG_LIBRARIES png zlib)
  LIST(APPEND PNG_INCLUDE_DIRECTORIES ${CMAKE_CURRENT_SOURCE_DIR}/png ${CMAKE_CURRENT_SOURCE_DIR}/zlib ${CMAKE_CURRENT_BINARY_DIR}/png/config)
  SET(PNG_INCLUDE_DIRS ${PNG_INCLUDE_DIRECTORIES})
  SET(PNG_LIBRARIES ${PNG_LIBRARIES} PARENT_SCOPE)
  SET(PNG_INCLUDE_DIRS ${PNG_INCLUDE_DIRS} PARENT_SCOPE)
ENDIF (NOT PNG_FOUND)

IF (NOT TIFF_FOUND)
  SET(OpenMVG_USE_INTERNAL_TIFF ON PARENT_SCOPE)
  SET(TIFF_INCLUDE_INSTALL_DIR ${CMAKE_INSTALL_PREFIX}/include/openMVG/third_party/tiff)
  ADD_SUBDIRECTORY(tiff)
  LIST(APPEND TIFF_INCLUDE_DIRECTORIES ${CMAKE_CURRENT_SOURCE_DIR}/tiff ${CMAKE_CURRENT_BINARY_DIR}/tiff)  
  SET(TIFF_INCLUDE_DIR ${TIFF_INCLUDE_DIRECTORIES})
  SET(TIFF_LIBRARIES tiff)
  SET(TIFF_LIBRARIES ${TIFF_LIBRARIES} PARENT_SCOPE)
  SET(TIFF_INCLUDE_DIR ${TIFF_INCLUDE_DIR} PARENT_SCOPE)
ENDIF (NOT TIFF_FOUND)
##
# End - Image I/O
##

# Add svg library
ADD_SUBDIRECTORY(vectorGraphics)

# Add ceres-solver (A Nonlinear Least Squares Minimizer)
IF (DEFINED OpenMVG_USE_INTERNAL_CERES)
  SET(CXSPARSE_INCLUDE_INSTALL_DIR ${CMAKE_INSTALL_PREFIX}/include/openMVG/third_party/cxsparse)
  ADD_SUBDIRECTORY(cxsparse)
  SET(CERES_INCLUDE_INSTALL_DIR ${CMAKE_INSTALL_PREFIX}/include/openMVG/third_party/ceres)
  ADD_SUBDIRECTORY(ceres-solver)
  SET_PROPERTY(TARGET cxsparse PROPERTY FOLDER OpenMVG/3rdParty/ceres)
  SET_PROPERTY(TARGET ceres PROPERTY FOLDER OpenMVG/3rdParty/ceres)
ENDIF()

# Add an Approximate Nearest Neighbor library
IF (DEFINED OpenMVG_USE_INTERNAL_FLANN)
  SET(FLANN_INCLUDE_INSTALL_DIR ${CMAKE_INSTALL_PREFIX}/include/openMVG/third_party/flann/src/cpp)
  ADD_SUBDIRECTORY(flann)
  SET_PROPERTY(TARGET flann_cpp_s PROPERTY FOLDER OpenMVG/3rdParty)
ENDIF()

# Exif data parsing
SET(EASYEXIF_INCLUDE_INSTALL_DIR ${CMAKE_INSTALL_PREFIX}/include/openMVG/third_party/easyexif)
ADD_SUBDIRECTORY(easyexif)

##
# Install Header only libraries if necessary
## 
IF (DEFINED OpenMVG_USE_INTERNAL_EIGEN)
  #Configure Eigen install
  SET(EIGEN_INCLUDE_INSTALL_DIR ${CMAKE_INSTALL_PREFIX}/include/openMVG/third_party/eigen)
  ADD_SUBDIRECTORY(eigen)
ENDIF()

LIST(APPEND directories cmdLine histogram htmlDoc progress tinythread vectorGraphics)
FOREACH(inDirectory ${directories}) 
INSTALL(
  DIRECTORY ./${inDirectory}
  DESTINATION include/openMVG/third_party/
  COMPONENT headers
  FILES_MATCHING PATTERN "*.hpp" PATTERN "*.h"
)
ENDFOREACH(inDirectory)
