#---------------------
#Third party libraries
#---------------------

# Unit test library
IF (OpenMVG_BUILD_TESTS)
  ADD_SUBDIRECTORY(CppUnitLite)
ENDIF()

# Basic filesystem utils
SET(STLPLUS_INCLUDE_INSTALL_DIR ${CMAKE_INSTALL_PREFIX}/include/openMVG/third_party/stlplus3)
ADD_SUBDIRECTORY(stlplus3)

# Add graph library
ADD_SUBDIRECTORY(lemon)
SET_PROPERTY(TARGET lemon PROPERTY FOLDER OpenMVG/3rdParty/lemon)
SET_PROPERTY(TARGET check PROPERTY FOLDER OpenMVG/3rdParty/lemon)

##
# Image I/O
##
IF(NOT JPEG_FOUND)
  SET(JPEG_INCLUDE_INSTALL_DIR ${CMAKE_INSTALL_PREFIX}/include/openMVG/third_party/jpeg)
  ADD_SUBDIRECTORY(jpeg)
  LIST(APPEND JPEG_INCLUDE_DIRECTORIES ${CMAKE_CURRENT_SOURCE_DIR}/jpeg ${CMAKE_CURRENT_BINARY_DIR}/jpeg/config)
  SET(JPEG_INCLUDE_DIR ${JPEG_INCLUDE_DIRECTORIES})
  SET(JPEG_LIBRARY jpeg)
  SET(JPEG_LIBRARY ${JPEG_LIBRARY} PARENT_SCOPE)
  SET(JPEG_INCLUDE_DIR ${JPEG_INCLUDE_DIR} PARENT_SCOPE)
ENDIF(NOT JPEG_FOUND)

IF (NOT PNG_FOUND)
  SET(ZLIB_INCLUDE_INSTALL_DIR ${CMAKE_INSTALL_PREFIX}/include/openMVG/third_party/zlib)
  SET(PNG_INCLUDE_INSTALL_DIR ${CMAKE_INSTALL_PREFIX}/include/openMVG/third_party/png)  
  ADD_SUBDIRECTORY(zlib)
  ADD_SUBDIRECTORY(png)
  SET(PNG_LIBRARIES png zlib)
  LIST(APPEND PNG_INCLUDE_DIRECTORIES ${CMAKE_CURRENT_SOURCE_DIR}/png ${CMAKE_CURRENT_SOURCE_DIR}/zlib ${CMAKE_CURRENT_BINARY_DIR}/png/config)
  SET(PNG_INCLUDE_DIRS ${PNG_INCLUDE_DIRECTORIES})
  SET(PNG_LIBRARIES ${PNG_LIBRARIES} PARENT_SCOPE)
  SET(PNG_INCLUDE_DIRS ${PNG_INCLUDE_DIRS} PARENT_SCOPE)
ENDIF (NOT PNG_FOUND)

IF (NOT TIFF_FOUND)
  SET(TIFF_INCLUDE_INSTALL_DIR ${CMAKE_INSTALL_PREFIX}/include/openMVG/third_party/tiff)
  ADD_SUBDIRECTORY(tiff)  
  LIST(APPEND TIFF_INCLUDE_DIRECTORIES ${CMAKE_CURRENT_SOURCE_DIR}/tiff ${CMAKE_CURRENT_BINARY_DIR}/tiff)  
  SET(TIFF_INCLUDE_DIR ${TIFF_INCLUDE_DIRECTORIES})
  SET(TIFF_LIBRARIES tiff)  
  SET(TIFF_LIBRARIES ${TIFF_LIBRARIES} PARENT_SCOPE)
  SET(TIFF_INCLUDE_DIR ${TIFF_INCLUDE_DIR} PARENT_SCOPE)
ENDIF (NOT TIFF_FOUND)
##
# End - Image I/O
##

# Add svg library
ADD_SUBDIRECTORY(vectorGraphics)

# Add ceres-solver (A Nonlinear Least Squares Minimizer)
IF (DEFINED OpenMVG_USE_INTERNAL_CERES)
  SET(CXSPARSE_INCLUDE_INSTALL_DIR ${CMAKE_INSTALL_PREFIX}/include/openMVG/third_party/cxsparse)
  ADD_SUBDIRECTORY(cxsparse)
  SET(CERES_INCLUDE_INSTALL_DIR ${CMAKE_INSTALL_PREFIX}/include/openMVG/third_party/ceres)
  ADD_SUBDIRECTORY(ceres-solver)
  SET_PROPERTY(TARGET cxsparse PROPERTY FOLDER OpenMVG/3rdParty/ceres)
  SET_PROPERTY(TARGET ceres PROPERTY FOLDER OpenMVG/3rdParty/ceres)
ENDIF()

# Add an Approximate Nearest Neighbor library
ADD_SUBDIRECTORY(flann)
SET_PROPERTY(TARGET flann_cpp_s PROPERTY FOLDER OpenMVG/3rdParty)

# Exif data parsing
SET(EASYEXIF_INCLUDE_INSTALL_DIR ${CMAKE_INSTALL_PREFIX}/include/openMVG/third_party/easyexif)
ADD_SUBDIRECTORY(easyexif)

##
# Install Header only libraries if necessary
## 
IF (DEFINED OpenMVG_USE_INTERNAL_EIGEN)
  #Configure Eigen install
  SET(EIGEN_INCLUDE_INSTALL_DIR ${CMAKE_INSTALL_PREFIX}/include/openMVG/third_party/eigen)
  ADD_SUBDIRECTORY(eigen)
ENDIF()

LIST(APPEND directories cmdLine histogram htmlDoc progress tinythread vectorGraphics)
FOREACH(inDirectory ${directories}) 
INSTALL(
  DIRECTORY ./${inDirectory}
  DESTINATION include/openMVG/third_party/
  COMPONENT headers
  FILES_MATCHING PATTERN "*.hpp" PATTERN "*.h"
)
ENDFOREACH(inDirectory)


#===============================
#---- nanomsg for distributed system communication
#===============================
OPTION(OpenMVG_USE_NANOMSG "Pass the computing progress via nanomsg to a socket. " OFF)
IF(OpenMVG_USE_NANOMSG)
  if(NOT EXISTS ${PROJECT_SOURCE_DIR}/third_party/nanomsg/src)
    message(FATAL_ERROR
      "\n'nanomsg' submodule is missing. Looked under ${PROJECT_SOURCE_DIR}/third_party/nanomsg/src. \nPlease update your repository:\n"
      "  > git submodule update -i\n")
  endif()

  IF(MSVC)
    #use the cmake file if on windows
    ADD_SUBDIRECTORY(dependencies/nanomsg)
  ELSE(MSVS)
    #check if the project is compiled
    if(NOT EXISTS ${PROJECT_SOURCE_DIR}/third_party/nanomsg/.libs/libnanomsg.so)
      message(FATAL_ERROR
        "\n'nanomsg' submodule needs to be compiled manually. Go to the directory ${PROJECT_SOURCE_DIR}/third_party/nanomsg and see the Readme file.\n"
        )
    endif()
    #set the parameters for nanomsg
    SET(NANOMSG_DIR "${PROJECT_SOURCE_DIR}/third_party/nanomsg")
    SET(NANOMSG_INCLUDE_DIRS "${NANOMSG_DIR}/src" PARENT_SCOPE)
    SET(NANOMSG_LIBRARIES "${NANOMSG_DIR}/.libs/libnanomsg.so" PARENT_SCOPE)
  ENDIF(MSVC)

  add_definitions(-DUSE_NANOMSG)
  MESSAGE(STATUS "NANOMSG Initialized")
ENDIF(OpenMVG_USE_NANOMSG)
